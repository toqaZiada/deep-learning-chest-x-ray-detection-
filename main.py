import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt

# âœ… Set page configuration (must be first Streamlit call)
st.set_page_config(
    page_title="Chest X-ray Detection",
    layout="wide",
    initial_sidebar_state="expanded"
)

# âœ… Load model once and cache it
@st.cache_resource
def load_model():
    return tf.keras.models.load_model("pneumonia_model.h5")

model = load_model()

def main():
    # Header Section
    with st.container():
        st.title("ðŸ©» Chest X-ray Detection")
        st.write("Binary classifier to distinguish between **Normal** and **Pneumonia** cases using chest X-ray images.")

    # Layout with 2 columns (left 4x wider than right)
    col1, col2 = st.columns([4, 1])

    with col1:
        st.subheader("ðŸ“¤ Upload Chest X-ray")
        uploaded_file = st.file_uploader("Upload an image (JPG/PNG)", type=["jpg", "jpeg", "png"])

        if uploaded_file is not None:
            # âœ… Convert to RGB to ensure 3 channels
            image = Image.open(uploaded_file).convert("RGB")
            st.image(image, caption="Uploaded Chest X-ray", use_column_width=True)

            # Preprocess image
            img_resized = image.resize((180, 180))
            img_array = tf.keras.preprocessing.image.img_to_array(img_resized)
            img_array = np.expand_dims(img_array, axis=0) / 255.0

            # Make prediction
            prediction = model.predict(img_array)[0][0]
            label = "Pneumonia" if prediction > 0.5 else "Normal"
            prob_normal = 1 - prediction
            prob_pneumonia = prediction

            # Confidence chart
            st.subheader("ðŸ“Š Prediction Confidence")
            fig, ax = plt.subplots(figsize=(4, 4))
            bars = ax.bar(["Normal", "Pneumonia"], [prob_normal, prob_pneumonia], color=["green", "red"])
            ax.set_ylim([0, 1])
            for bar in bars:
                yval = bar.get_height()
                ax.text(bar.get_x() + bar.get_width() / 2.0, yval + 0.02, f"{yval:.2%}", ha='center', va='bottom')
            st.pyplot(fig)

    with col2:
        st.subheader("ðŸ“¦ Result")
        if uploaded_file is not None:
            st.markdown(f"**Prediction:** `{label}`")
            st.metric("Probability: Normal", f"{prob_normal:.2%}")
            st.metric("Probability: Pneumonia", f"{prob_pneumonia:.2%}")
            st.caption("This result is generated by a deep learning model. It is not a substitute for professional medical advice.")
        else:
            st.info("Please upload an image to get prediction results.")

if __name__ == '__main__':
    main()
